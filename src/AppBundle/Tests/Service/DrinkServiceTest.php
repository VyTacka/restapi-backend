<?php
namespace AppBundle\Tests\Service;

use AppBundle\Entity\Drink;
use AppBundle\Entity\User;
use AppBundle\Repository\DrinkRepository;
use AppBundle\Service\DrinkService;
use Doctrine\ORM\EntityManager;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-12-07 at 21:53:56.
 */
class DrinkServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var DrinkService
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $drinkRepository = $this
            ->getMockBuilder(DrinkRepository::class)
            ->disableOriginalConstructor()
            ->getMock();

        $entityManager = $this
            ->getMockBuilder(EntityManager::class)
            ->disableOriginalConstructor()
            ->getMock();

        // testFindByUser
        $drinkRepository->expects($this->any())
            ->method('findByUser')
            ->willReturn(new Drink());

        // testFindBy
        $drinkRepository->expects($this->any())
            ->method('findBy')
            ->willReturn([]);

        // testFindOneBy
        $drinkRepository->expects($this->any())
            ->method('findOneBy')
            ->willReturn(new Drink());

        // testFindBetween
        $drinkRepository->expects($this->any())
            ->method('findBetween')
            ->willReturn([]);

        $this->object = new DrinkService($drinkRepository, $entityManager);
    }

    public function testFindByUser()
    {
        $this->object->findByUser(new User());
    }

    public function testFindBy()
    {
        $this->object->findBy([]);
    }

    public function testFindOneBy()
    {
        $this->object->findOneBy([]);
    }

    public function testFindBetween()
    {
        $this->object->findBetween(new \DateTime(), new \DateTime(), new User());
    }

    public function testSave()
    {
        $this->object->save();
    }

    public function testCreate()
    {
        $this->object->create(new Drink());
    }
}
